
# Database Transactions :

ACID Properties - To maintain the consistency of Database certain properties have to be followed.
	• Atomicity:  All parts of the transactions must commit successfully or none should commit. I.e. all should succeed or nothing.
		         Ex: Bank Transaction will happen if DEBIT at one account & CREDIT at another account. Transaction is complete if both happens, else none.
	• Consistency: Any transaction must create a valid state of data or should revert back to previous state of data.
	             Ex: after successful bank transactions, the amount in both accounts should reflect correctly, else DB is not  consistent.
	• Isolation: Multiple transactions should happen independently without interfering.
		         Ex: Multiple transactions can happen at same time without any interference, after transaction the  amount  in each account must be accordingly. 
	• Durability: Successfully committed data should be stored safely to recover in the times of disaster. 
	             Ex: In the disk, so in case of any failures, the changes happened should reflect.

Types of transactions :
********************
	Implicit : are automatically handled by the SQL server to maintain ACID properties. Ex. : INSERT / update / merge commands 
	Explicit : are started by using the BEGIN TRANSACTION .. COMMIT TRANSACTION / ROLLBACK TRANSACTION properties then only changes more from LDF to MDF.
		
Marked transaction:
********************
	• uniquely identifies the transaction that has been exclusively marked for specific purpose.
	• in all point-in-time restore operations, recovering to a mark is disallowed when the database is undergoing operations that are bulk-logged.
	• Identify the most recent marked transaction that is available in all of the transaction log backups. 
	This information is stored in the logmarkhistory table in the msdb database  
	 
	 
	 
	
