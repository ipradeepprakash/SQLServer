Beginning T-SQL: A Step-by-Step Approach
- Kathi Kellenberger, 
- Lee Everest

The book is broken down like this:
•	Chapters 1 and 2 provide an introduction to databases and some background information you'll need to understand to read the rest of the book.
•	Chapters 3 through 9 cover how to write queries to retrieve data from SQL Server.
•	Chapters 10 and 11 cover updating, deleting, and inserting data.
•	Chapters 12 and 13 cover how to implement logic in the database.
•	Chapters 14, 15, and 16 are bonus chapters with advanced querying topics.
•	Chapter 17 contains many resources for learning more.
•	Appendices A, B, and C contain information for alternate tools for running and querying SQL Server.


Chapter 1: Getting Started
Overview
T-SQL, also known as Transact-SQL, is Microsoft's implementation of the Structured Query Language (SQL) for SQL Server. 
Most database professionals pronounce SQL like the word "sequel," but you will occasionally hear someone say it as S-Q-L.

Download Sample Databases
-------------------------
This book takes advantage of two sample databases made available by Microsoft: AdventureWorks and WideWorldImporters. You will install these databases on your new SQL Server instance later in the chapter. 
By downloading them now, they will be in place when you are ready for the restores.
Look for the AdventureWorks OLTP full database backup file on this page: https://github.com/Microsoft/sql-server-samples/releases/tag/adventureworks. 
Look for the WideWorldImporters OLTP full database backup file here:  https://github.com/Microsoft/sql-server-samples/releases/tag/wide-world-importers-v1.0. 

T-SQL
---------------

Using WHERE Clauses with Alternate Operators
Within WHERE clause expressions, you can use many comparison operators, not just the equals sign. The documentation for SQL Server lists the following operators:
    •	> (greater than)
    •	< (less than)
    •	= (equals)
    •	<= (less than or equal to)
    •	>= (greater than or equal to)
    •	!= (not equal to)
    •	<> (not equal to)
    •	!< (not less than)
    •	!> (not greater than)


Using BETWEEN
--------------------
      - BETWEEN is another useful operator you can use in the WHERE clause to specify an inclusive range of values. 
      - It is frequently used with dates but can be used with string and numeric data as well. 
      - An interesting thing to note about BETWEEN is that the edges are included in the results. This is different than the behavior in some other languages.
      
      Here is the syntax for a query using BETWEEN:
      
      syntax
      ............
      SELECT <column1>,<column2>
      FROM <schema>.<table>
      WHERE <column> BETWEEN <value1> AND <value2>;


        use AdventureWorks2019
        go
        
        --1
        SELECT CustomerID, SalesOrderID, OrderDate
        FROM Sales.SalesOrderHeader
        WHERE OrderDate BETWEEN '2011-07-02' AND '2011-07-04';
        
        --2
        SELECT CustomerID, SalesOrderID, OrderDate
        FROM Sales.SalesOrderHeader
        WHERE CustomerID BETWEEN 25000 AND 25005;
        
        --3
        SELECT BusinessEntityID, JobTitle
        FROM HumanResources.Employee
        WHERE JobTitle BETWEEN 'C' and 'E';
        
        --4 An illogical BETWEEN expression
        SELECT CustomerID, SalesOrderID, OrderDate
        FROM Sales.SalesOrderHeader
        WHERE CustomerID BETWEEN 25005 AND 25000;

/*

Note: 
-- query 3
What can you expect from Query 3? You will see all job titles that start with C or D. You will not see the job titles beginning with E, however. A job title composed of only the letter E would be returned in the results. Any job title beginning with E and at least one other character is greater than E and therefore not within the range. For example, the Ex in Executive is greater than just E, so any job titles beginning with Executive get eliminated.

-- Query 4
Query 4 returns 0 rows, because values listed in the BETWEEN expression are switched. No values meet the qualification of being greater than or equal to 25005 and also less than or equal to 25000. Make sure you always list the lower value first and the higher value second when using BETWEEN. 

*/

Using NOT BETWEEN
---------------------
    To find values outside a certain range, we write the WHERE clause expression using BETWEEN along with the NOT keyword as shown below.
           use AdventureWorks2019
            go
        
        --1
        SELECT CustomerID, SalesOrderID, OrderDate FROM Sales.SalesOrderHeader
        where OrderDate 
        NOT BETWEEN '2011-06-05 00:00:00.000' and '2014-05-12 00:00:00.000'
        
        --2 
        SELECT CustomerID, SalesOrderID, OrderDate FROM Sales.SalesOrderHeader 
        WHERE CustomerID 
        NOT BETWEEN 25000 AND 25005;
        
        --3 
        SELECT BusinessEntityID, JobTitle FROM HumanResources.Employee 
        WHERE JobTitle NOT BETWEEN 'C' and 'E'; 
        
        --4 An illogical BETWEEN expression 
        SELECT CustomerID, SalesOrderID, OrderDate FROM Sales.SalesOrderHeader 
        WHERE CustomerID 
        NOT BETWEEN 25005 AND 25000;
        
        /*
        
        
        Query 3 returns all job titles beginning with A and B. It also displays any job titles beginning with E and at least one more character, as well as any job titles starting with a letter greater than E. If a title consists of just the letter E, it will not show up in the results.
        
        Query 4 with the illogical BETWEEN expression returns all the rows in the table. Because no customer ID values can be less than or equal to 25005 and also be greater than or equal to 25000,
        By adding the NOT operator, every row ends up in the results, which is probably not the original intent.
        
        */

Filtering on Date and Time
---------------------------------
        Some temporal data columns store the time as well as the date. If you attempt to filter on such a column specifying only the date, you may retrieve incomplete results
        use tempdb
        go
        --Listing 3-9:
                CREATE TABLE #DateTimeExample( ID INT NOT NULL IDENTITY PRIMARY KEY, MyDate DATETIME2(0) NOT NULL, MyValue VARCHAR(25) NOT NULL ); 
                GO 
                INSERT INTO #DateTimeExample (MyDate,MyValue) 
                VALUES ('2020-01-02 10:30','Bike'), 
                ('2020-01-03 13:00','Trike'), 
                ('2020-01-03 13:10','Bell'), 
                ('2020-01-03 17:35','Seat');
        
        
                --1 
                SELECT 
                ID, MyDate, MyValue 
                FROM #DateTimeExample 
                WHERE 
                MyDate = '2020-01-03';
                
                --2
                SELECT 
                ID, MyDate, MyValue 
                FROM #DateTimeExample 
                WHERE MyDate 
                BETWEEN '2020-01-03 00:00:00' AND '2020-01-03 23:59:59';
        
        
        /*
        Note:
        
        - Query 1 tries to do that but returns no results. Results will be returned only for entries where the MyDate value is precisely 2020-01-03 00:00:00, and there are no such entries.
        - Query 2 returns the expected results—all values where the date is 2020-01-03. It does that by taking the time of day into account.
        
        */

-------------- # practice questions -------------------------------


/*

Write a query using a WHERE clause that displays all the employees listed in the HumanResources.Employee table who have the job title "Research and Development Engineer." 
Display the BusinessEntityID, the login ID, and the job title for each one.

*/

		use AdventureWorks2019
		go
		select 
		BusinessEntityID,LoginID,JobTitle
		from HumanResources.Employee
		where 
		JobTitle = 'Research and Development Engineer'


/*

Write a query displaying all the columns of the Production.ProductCostHistory table from the rows in which the standard cost is between the values of $10 and $13.

*/

		use AdventureWorks2019
		go
		select 
		*
		from Production.ProductCostHistory
		where 
		StandardCost BETWEEN '$10' and '$13'


/*

Rewrite the query you wrote in Question 1, changing it so the employees who do not have the title "Research and Development Engineer" are displayed.
*/

		use AdventureWorks2019
		go
		select 
		BusinessEntityID,LoginID,JobTitle
		from HumanResources.Employee
		where 
		JobTitle != 'Research and Development Engineer'


/*

Write a SELECT statement to return all the customers from the Sales.Customers table who signed up in 2016. 
Include the CustomerID, CustomerName, and AccountOpenedDate. 
Hint: Filter on the AccountOpenedDate (date only) and use the BETWEEN operator.

*/

use WideWorldImporters
		go
		select CustomerID, CustomerName, AccountOpenedDate
		from Sales.Customers
		where AccountOpenedDate 
		BETWEEN '2016-01-01' and '2016-12-31'
	

-- sp_help 'Sales.Customers'





























